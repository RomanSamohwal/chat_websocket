{"version":3,"sources":["api.ts","chat-reducer.ts","SelectionName.tsx","Messages.jsx","ButtonSend.js","Message.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx","Message.module.css","Chat.module.css","App.module.css"],"names":["api","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessageHandler","userTypingHandler","on","destroyConnection","disconnect","sendName","name","emit","sendMessage","message","error","alert","typingMessage","initialState","messages","typingUsers","SelectionName","dispatch","useDispatch","useState","setName","TextField","variant","value","label","onChange","e","currentTarget","color","inputMode","autoFocus","Button","onClick","setClientName","Messages","props","className","s","wrapper","cloud","text","useStyles","makeStyles","theme","button","margin","spacing","IconLabelButtons","classes","endIcon","Message","useSelector","state","chat","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","messagesAnchorRef","useRef","setMessage","useEffect","type","messageReceived","newMessageReceived","user","typingUserAdded","current","scrollIntoView","behavior","style","Chat","onScroll","element","maxScrollPosition","scrollHeight","clientHeight","module","Math","abs","scrollTop","map","m","key","id","ref","onKeyPress","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","filter","u","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","exports"],"mappings":"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","file":"static/js/main.ca75e050.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n\r\nlet my = 'https://chat-websocket-backend.herokuapp.com';\r\nlet dimon = 'https://samurai-chat-back.herokuapp.com'\r\nlet localhost = 'http://localhost:3009'\r\n\r\nexport const api = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    createConnection() {\r\n        this.socket = io(my);\r\n    },\r\n    subscribe(initMessagesHandler: (messages: any) => void,\r\n              newMessageHandler: (message: any) => void,\r\n              userTypingHandler: (user: any) => void) {\r\n        this.socket?.on('init-messages-published', initMessagesHandler);\r\n        this.socket?.on('new-message-sent', newMessageHandler)\r\n        this.socket?.on('user-typing', userTypingHandler)\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null;\r\n    },\r\n    sendName(name: string) {\r\n        // канал по которому придет сообщение на бэк , событие 'client-message-sent'\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sendMessage(message: string) {\r\n        // канал по которому придет сообщение на бэк , событие 'client-message-sent'\r\n        this.socket?.emit('client-message-sent', message, (error: string | null) => {\r\n            if(error) alert(error)\r\n        });\r\n    },\r\n    typingMessage() {\r\n        this.socket?.emit('client-typing');\r\n    }\r\n}","import {api} from './api';\r\n\r\nconst initialState = {\r\n    messages: [] as any,\r\n    typingUsers:  [] as any\r\n}\r\n\r\nexport const chatReducer = (state: initialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case 'messages-received': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'new-messages-received': {\r\n            return {\r\n                ...state, messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter((u: any) => u.id !== action.message.user.id)\r\n            }\r\n        }\r\n        case 'typingUserAdded': {\r\n            return {...state, typingUsers: [...state.typingUsers.filter((u: any) => u.id !== action.user.id), action.user]}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst messageReceived = (messages: any) => ({type: 'messages-received', messages} )\r\nconst newMessageReceived = (message: any) => ({type: 'new-messages-received', message} )\r\nconst typingUserAdded = (user: any) => ({type: 'typingUserAdded', user} )\r\n\r\n\r\nexport const createConnection = () => (dispatch: any) => {\r\n    api.createConnection()\r\n    api.subscribe((messages: any) => {\r\n            dispatch(messageReceived(messages))\r\n        }, (message: any) => {\r\n            dispatch(newMessageReceived(message))\r\n        },\r\n        (user: any) => {\r\n            dispatch(typingUserAdded(user))\r\n        })\r\n}\r\n\r\nexport const setClientName = (name: string) => (dispatch: any) => {\r\n    api.sendName(name)\r\n}\r\n\r\nexport const sendMessage = (message: string) => (dispatch: any) => {\r\n    api.sendMessage(message)\r\n}\r\n\r\nexport const typingMessage = () => (dispatch: any) => {\r\n    api.typingMessage()\r\n}\r\n\r\nexport const destroyConnection = () => (dispatch: any) => {\r\n    api.destroyConnection()\r\n\r\n}\r\n\r\ntype initialStateType = typeof initialState","import React, {useState} from 'react';\r\nimport {setClientName} from './chat-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Button, Input, TextField} from '@material-ui/core';\r\n\r\nexport const SelectionName = () => {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n\r\n    return <div>\r\n        <TextField variant='outlined' value={name} label='enter your name' onChange={(e) =>\r\n            setName(e.currentTarget.value)} color={'primary'} inputMode={'text'} autoFocus/>\r\n        <Button color={'primary'} variant=\"contained\" onClick={() => {\r\n            dispatch(setClientName(name))\r\n        }}\r\n        >send name\r\n        </Button>\r\n    </div>\r\n}","import React from 'react';\nimport s from \"./Message.module.css\";\n\nconst Messages = (props) => {\n    return <div className={s.wrapper}>\n        <div className={s.cloud}>\n            <div className={s.cloud}>\n                <div className={s.name}>{props.name}</div>\n                {props.text}\n            </div>\n        </div>\n    </div>\n}\n\nexport default Messages;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nexport default function IconLabelButtons(props) {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                endIcon={<SendIcon/>}\n                onClick={props.sendMessage}\n            >\n                Send\n            </Button>\n        </div>\n    );\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from './store';\r\nimport {createConnection, destroyConnection, sendMessage, typingMessage} from './chat-reducer';\r\nimport Messages from './Messages';\r\nimport style from './Chat.module.css'\r\nimport IconLabelButtons from './ButtonSend';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\n\r\nexport const Message = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const typingUsers = useSelector((state: AppStateType) => state.chat.typingUsers)\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true);\r\n    const [lastScrollTop, setLastScrollTop] = useState(0)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [message, setMessage] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(createConnection())\r\n        return () => {\r\n            dispatch(destroyConnection())\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isAutoScrollActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div>\r\n        <div className={style.Chat} onScroll={(e) => {\r\n            let element = e.currentTarget;\r\n            let maxScrollPosition = element.scrollHeight - element.clientHeight;\r\n            let module = Math.abs(maxScrollPosition - element.scrollTop) < 10\r\n\r\n            if (e.currentTarget.scrollTop > lastScrollTop && module) {\r\n                setIsAutoScrollActive(true);\r\n            } else {\r\n                setIsAutoScrollActive(false)\r\n            }\r\n            setLastScrollTop(e.currentTarget.scrollTop)\r\n        }}>\r\n            {messages.map((m: any) => {\r\n                return <Messages key={m.id} text={m.message} name={m.user.name}/>\r\n            })}\r\n            {typingUsers.map((m: any) => {\r\n                return <div key={m.id} className={style.Chat}>\r\n                     <div>\r\n                         <b>{m.name} : </b> .........<BorderColorIcon/>\r\n                     </div>\r\n                </div>\r\n            })}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n        <div className={style.Message}>\r\n            <div>\r\n                <TextField value={message}\r\n                           onChange={(e) => setMessage(e.currentTarget.value)}\r\n                           onKeyPress={() => {\r\n                               dispatch(typingMessage())\r\n                           }}>\r\n                </TextField>\r\n                <IconLabelButtons sendMessage={() => {\r\n                    // канал по которому придет сообщение на бэк , событие 'client-message-sent'\r\n                    dispatch(sendMessage(message))\r\n                    setMessage('');\r\n                }}>Send Message\r\n                </IconLabelButtons>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n/*<Messages key={m.id} text={'...typing message'} name={m.name}/>*/","import React from 'react';\nimport {SelectionName} from './SelectionName';\nimport {Message} from './Message';\nimport style from './App.module.css'\n\nfunction App() {\n    return (\n        <div className={style.App}>\n            <div>\n                <SelectionName/>\n                <Message/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {chatReducer} from './chat-reducer';\r\n\r\nlet rootReducer = combineReducers({chat: chatReducer})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n        <App />\n    </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cloud\":\"Message_cloud__2XHLC\",\"wrapper\":\"Message_wrapper__24nb1\",\"before\":\"Message_before__f6bjM\",\"name\":\"Message_name__2MOYi\",\"text\":\"Message_text__2mWN5\",\"time\":\"Message_time__33AfH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chat\":\"Chat_Chat__LIjdK\",\"Message\":\"Chat_Message__2SoSG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__lTcle\"};"],"sourceRoot":""}